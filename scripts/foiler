#!/usr/bin/python
import os
import argparse
import shutil
import re
import uuid
import json
import subprocess
import sys

# Requires Bower
# npm install -g bower


parser = argparse.ArgumentParser(description="Flask Boilerplate")
parser.add_argument('mode', choices=[
	'server',
	'init',
	'migrate',
	'configure',
	# 'install',
	'test'])

parser.add_argument('package',action='store',nargs='?',
                        help='When using "import", a package name must be provided.',
                        metavar="package (when using import option)")


args = parser.parse_args()
module_folder = os.path.dirname(os.path.abspath(__file__))
template_folder = os.path.join(module_folder, '../Flask-Boilerplate/')

# Because copytree kinda sucks
def copytree(src, dst, symlinks=False, ignore=None):
    for item in os.listdir(src):
        s = os.path.join(src, item)
        d = os.path.join(dst, item)
        if os.path.isdir(s):
            shutil.copytree(s, d, symlinks, ignore)
        else:
            shutil.copy2(s, d)


def get_package_json():
	path = traverse_for_file('./app.json')
	if path:
		with open(os.path.isfile(os.path.join(path, './app.json'))) as f:
			d = json.loads(f.readlines())

	return d

def traverse_for_file(fname):
	path = os.getcwd()
	while not os.path.isfile(os.path.join(path, './%s' % (fname))):
		path = os.path.realpath(os.path.join(path, '../'))
		if path == '/':
			return None
	return path

def within_valid_project():
	if traverse_for_file('app.json'):
		return True
	return False


if args.mode == 'init':
	app_folder = os.path.join(os.getcwd())
	if os.path.isfile(os.path.join(app_folder, './app.json')):
		print "Cannot re-init in an already initialised application"
		exit(1)

	safe_name_re = re.compile('^[A-Za-z0-9_\-]+$')

	print "App Name: ",

	app_name = raw_input()
	while not safe_name_re.match(app_name):
		print "Please enter a valid app name ([A-Za-z0-9_\-]+)"
		print "App Name: ",
		app_name = raw_input()

	print "Initialising..."
	
	copytree(template_folder,app_folder)

	data = dict(app_name=app_name)

	with open(os.path.join(app_folder, 'app.json'), 'w') as f:
		f.write(json.dumps(data))

	os.remove(os.path.join(app_folder, 'Application/config/variables.py'))

	print "Initialised %s successfully." % (app_name)


elif args.mode == 'configure':
	# Configure the app.
	section = re.compile(r'^#(.*)')
	prop = re.compile(r'^([A-Za-z_][0-9A-Za-z_]*) *= *(.*)(#.*)?$')

	root_folder = traverse_for_file('app.json')
	variables_file = os.path.join(root_folder, 'Application/config/variables.py')
	variables_file_example = os.path.join(root_folder, 'Application/config/variables.py.example')

	if os.path.isfile(variables_file):
		new_app = False
		fname = variables_file
	else:
		new_app = True
		fname = variables_file_example

	output_lines = []

	with open(fname) as f:
		for line in f:
			line = line.strip()
			section_match = section.match(line) 
			if section_match:
				print "\033[32m" + section_match.group(1).strip() + "\033[0m"
				output_lines.append("# %s" % (section_match.group(1).strip()))

			prop_match = prop.match(line)
			if prop_match:
				if new_app and (prop_match.group(1).strip() == 'SECRET_KEY' or prop_match.group(1).strip() == 'SECURITY_PASSWORD_SALT'):
					# Instead generate these
					value = "'%s%s%s'" % (uuid.uuid4().hex, uuid.uuid4().hex, uuid.uuid4().hex)

				else:
					print "%s (%s):" % (prop_match.group(1).strip(), prop_match.group(2).strip()),
					value = raw_input()
					if value == '':
						value = prop_match.group(2)

					value = value.strip()

				
				output_lines.append("%s = %s" % (prop_match.group(1).strip(), value))

	# print output_lines
	with open(variables_file, 'w') as f:
		for line in output_lines:
			f.write(line + "\n")


elif args.mode == 'server':
	if not within_valid_project():
		print "Not within a Flask Project"
		exit(1)
	# Compile and run the run script
	root_folder = traverse_for_file('app.json')
	subprocess.call(['make', 'debug'], cwd=root_folder, shell = True)

elif args.mode == 'test':
	if not within_valid_project():
		print "Not within a Flask Project"
		exit(1)
	# Compile and run the run script
	root_folder = traverse_for_file('app.json')
	subprocess.call(['make test'], cwd=root_folder, shell = True)

# elif args.mode == 'install':
# 	# Here we will import new js packages
# 	if not args.package:
# 		print "You must supply a bower package to install"
# 		exit(1)
	
# 	root_folder = traverse_for_file('app.json')
# 	subprocess.call(['bower install %s' % args.package], cwd=root_folder, shell = True)



elif args.mode == 'migrate':
	# Here we will do a model migration
	pass

